[
  {
    "version": "1",
    "site_title": "2",
    "site_description": "3",
    "about": "4",
    "about_img": "5",
    "author": "2",
    "indie_auth": true,
    "social_media": "6",
    "domain": "7",
    "rootpath": "8",
    "now": "9",
    "navigation": "10",
    "posts": "11",
    "like": "12",
    "note": "13",
    "photo": "14",
    "repost": "15",
    "event": "16",
    "rsvp": "17",
    "reply": "18",
    "video": "19",
    "article": "20",
    "collections": "21",
    "tags": "22",
    "layout": "23",
    "date": "24",
    "title": "25",
    "slug": "26",
    "collection": "27",
    "repostof": "28",
    "contents": "25",
    "mode": "29",
    "stats": "30",
    "path": "31",
    "next": "32"
  },
  "0.1.1",
  "Gijs van Dam",
  "Gijs van Dam is a freelance consultant and crypto researcher with over 20 years of international experience, who tries to make the web a better place.",
  "<a class=\"p-name u-url\" href=\"/\">Gijs van Dam</a> is a <a href=\"/about\">researcher, consultant and business founder.</a> He started as a web developer in the last century and was part of several start-ups since 2002. Since 2018 he is pursuing a PhD in computer science at the National University of Malaysia, where he lives.",
  "/images/gijsvandam.jpg",
  {
    "github": "33",
    "linkedin": "34",
    "researchgate": "35",
    "mastodon": "36",
    "twitter": "37",
    "rss": "38",
    "keybase": "39",
    "orcid": "40",
    "google-scholar": "41"
  },
  "gijswijs.github.io",
  "/",
  "2022-02-18T09:09:37.510Z",
  ["42", "43", "44", "45", "46", "47", "48", "49"],
  ["50", "51", "52", "53", "54", "55", "56", "57"],
  ["58"],
  [
    "59",
    "60",
    "61",
    "62",
    "63",
    "64",
    "65",
    "66",
    "67",
    "68",
    "69",
    "70",
    "71",
    "72",
    "73",
    "74",
    "75",
    "76",
    "77"
  ],
  ["78", "79", "80", "81", "82", "83"],
  ["84", "85"],
  [],
  [],
  [],
  [],
  [],
  {
    "posts": "11",
    "navigation": "10",
    "event": "16",
    "rsvp": "17",
    "repost": "15",
    "like": "12",
    "reply": "18",
    "video": "19",
    "photo": "14",
    "note": "13",
    "article": "20"
  },
  {
    "bitcoin": "86",
    "windows 10": "87",
    "lnd": "88",
    "simverse": "89",
    "vscode": "90",
    "webassembly": "91",
    "janos": "92",
    "boilerplate paper": "93",
    "powershell": "94",
    "git": "95",
    "pandoc": "96",
    "lua": "97",
    "LaTeX": "98",
    "revealjs": "99",
    "c-lightning": "100",
    "ssh": "101",
    "indieweb": "102",
    "test1": "103",
    "test2": "104"
  },
  "miksa/micropubpost.njk",
  "2022-02-18T08:24:48.066Z",
  "",
  "30288",
  ["105"],
  ["106"],
  "4444",
  { "mode": 100644 },
  "repost/2022/02/18-30288",
  {
    "layout": "23",
    "date": "107",
    "title": "25",
    "slug": "108",
    "collection": "109",
    "repostof": "110",
    "contents": "25",
    "mode": "29",
    "stats": "111",
    "path": "112",
    "previous": "113"
  },
  { "url": "114", "icon": "115", "name": "116", "me": true },
  { "url": "117", "icon": "118", "name": "119", "me": true },
  { "url": "120", "icon": "121", "name": "122", "me": true },
  { "url": "123", "icon": "124", "name": "125", "me": true },
  { "url": "126", "icon": "127", "name": "128", "me": true },
  { "url": "129", "icon": "130", "name": "131", "me": false, "rel": "25" },
  { "url": "132", "icon": "133", "name": "134", "me": true },
  { "url": "135", "icon": "136", "name": "137", "me": true },
  { "url": "138", "name": "139", "me": true },
  {
    "label": "140",
    "navpath": "8",
    "collection": "141",
    "sortId": 0,
    "contents": "25",
    "mode": "29",
    "stats": "142",
    "path": "143"
  },
  {
    "title": "144",
    "layout": "145",
    "collection": "146",
    "label": "144",
    "sortId": 2,
    "contents": "147",
    "mode": "29",
    "stats": "148",
    "path": "149"
  },
  {
    "title": "150",
    "layout": "145",
    "collection": "151",
    "label": "150",
    "sortId": 3,
    "contents": "152",
    "mode": "29",
    "stats": "153",
    "path": "154"
  },
  {
    "title": "155",
    "layout": "145",
    "collection": "156",
    "label": "155",
    "sortId": 4,
    "contents": "157",
    "mode": "29",
    "stats": "158",
    "path": "159"
  },
  {
    "title": "160",
    "layout": "145",
    "collection": "161",
    "label": "160",
    "sortId": 5,
    "contents": "162",
    "mode": "29",
    "stats": "163",
    "path": "164"
  },
  {
    "title": "165",
    "layout": "145",
    "collection": "166",
    "label": "167",
    "sortId": 6,
    "contents": "168",
    "mode": "29",
    "stats": "169",
    "path": "170"
  },
  {
    "title": "171",
    "layout": "145",
    "collection": "172",
    "label": "173",
    "slug": "174",
    "sortId": 6,
    "contents": "175",
    "mode": "29",
    "stats": "176",
    "path": "174"
  },
  {
    "title": "177",
    "layout": "145",
    "collection": "178",
    "label": "177",
    "sortId": 7,
    "contents": "179",
    "mode": "29",
    "stats": "180",
    "path": "181"
  },
  {
    "title": "182",
    "date": "183",
    "layout": "184",
    "tags": "185",
    "contents": "186",
    "mode": "29",
    "stats": "187",
    "path": "188",
    "collection": "189",
    "next": "51",
    "excerpt": "190"
  },
  {
    "title": "191",
    "date": "192",
    "layout": "184",
    "tags": "193",
    "contents": "194",
    "mode": "29",
    "stats": "195",
    "path": "196",
    "collection": "197",
    "previous": "50",
    "next": "52",
    "excerpt": "198"
  },
  {
    "title": "199",
    "date": "200",
    "layout": "184",
    "tags": "201",
    "contents": "202",
    "mode": "29",
    "stats": "203",
    "path": "204",
    "collection": "205",
    "previous": "51",
    "next": "53",
    "excerpt": "206"
  },
  {
    "title": "207",
    "date": "208",
    "layout": "184",
    "tags": "209",
    "contents": "210",
    "mode": "29",
    "stats": "211",
    "path": "212",
    "collection": "213",
    "previous": "52",
    "next": "54",
    "excerpt": "214"
  },
  {
    "title": "215",
    "date": "216",
    "layout": "184",
    "tags": "217",
    "contents": "218",
    "mode": "29",
    "stats": "219",
    "path": "220",
    "collection": "221",
    "previous": "53",
    "next": "55",
    "excerpt": "222"
  },
  {
    "title": "223",
    "date": "224",
    "layout": "184",
    "tags": "225",
    "contents": "226",
    "mode": "29",
    "stats": "227",
    "path": "228",
    "collection": "229",
    "previous": "54",
    "next": "56",
    "excerpt": "230"
  },
  {
    "title": "231",
    "date": "232",
    "layout": "184",
    "tags": "233",
    "contents": "234",
    "mode": "29",
    "stats": "235",
    "path": "236",
    "collection": "237",
    "previous": "55",
    "next": "57",
    "excerpt": "238"
  },
  {
    "title": "239",
    "date": "240",
    "layout": "184",
    "tags": "241",
    "contents": "242",
    "mode": "29",
    "stats": "243",
    "path": "244",
    "collection": "245",
    "previous": "56",
    "excerpt": "246"
  },
  {
    "layout": "23",
    "date": "247",
    "title": "25",
    "slug": "248",
    "collection": "249",
    "likeof": "250",
    "contents": "25",
    "mode": "29",
    "stats": "251",
    "path": "252"
  },
  {
    "layout": "23",
    "date": "253",
    "title": "25",
    "slug": "254",
    "collection": "255",
    "photo": "256",
    "syndication": "257",
    "contents": "258",
    "mode": "29",
    "stats": "259",
    "path": "260",
    "next": "60"
  },
  {
    "layout": "23",
    "date": "261",
    "title": "25",
    "slug": "262",
    "collection": "263",
    "contents": "264",
    "mode": "29",
    "stats": "265",
    "path": "266",
    "previous": "59",
    "next": "61"
  },
  {
    "layout": "23",
    "date": "267",
    "title": "25",
    "slug": "268",
    "collection": "269",
    "contents": "270",
    "mode": "29",
    "stats": "271",
    "path": "272",
    "previous": "60",
    "next": "62"
  },
  {
    "layout": "23",
    "date": "273",
    "title": "25",
    "slug": "274",
    "collection": "275",
    "contents": "276",
    "mode": "29",
    "stats": "277",
    "path": "278",
    "previous": "61",
    "next": "63"
  },
  {
    "layout": "23",
    "date": "279",
    "title": "25",
    "slug": "280",
    "collection": "281",
    "contents": "282",
    "mode": "29",
    "stats": "283",
    "path": "284",
    "previous": "62",
    "next": "64"
  },
  {
    "layout": "23",
    "date": "285",
    "title": "25",
    "tags": "286",
    "slug": "287",
    "collection": "288",
    "contents": "289",
    "mode": "29",
    "stats": "290",
    "path": "291",
    "previous": "63",
    "next": "65"
  },
  {
    "layout": "23",
    "date": "292",
    "title": "25",
    "tags": "293",
    "slug": "294",
    "collection": "295",
    "contents": "296",
    "mode": "29",
    "stats": "297",
    "path": "298",
    "previous": "64",
    "next": "66"
  },
  {
    "layout": "23",
    "date": "299",
    "title": "25",
    "slug": "300",
    "collection": "301",
    "contents": "302",
    "mode": "29",
    "stats": "303",
    "path": "304",
    "previous": "65",
    "next": "67"
  },
  {
    "layout": "23",
    "date": "305",
    "title": "25",
    "slug": "306",
    "collection": "307",
    "contents": "270",
    "mode": "29",
    "stats": "308",
    "path": "309",
    "previous": "66",
    "next": "68"
  },
  {
    "layout": "23",
    "date": "310",
    "title": "25",
    "slug": "311",
    "mf-photo": "312",
    "collection": "313",
    "contents": "314",
    "mode": "29",
    "stats": "315",
    "path": "316",
    "previous": "67",
    "next": "69"
  },
  {
    "layout": "23",
    "date": "317",
    "title": "25",
    "slug": "318",
    "mf-photo": "319",
    "collection": "320",
    "contents": "321",
    "mode": "29",
    "stats": "322",
    "path": "323",
    "previous": "68",
    "next": "70"
  },
  {
    "layout": "23",
    "date": "324",
    "title": "25",
    "slug": "325",
    "mf-photo": "326",
    "collection": "327",
    "contents": "328",
    "mode": "29",
    "stats": "329",
    "path": "330",
    "previous": "69",
    "next": "71"
  },
  {
    "layout": "23",
    "date": "331",
    "title": "25",
    "tags": "332",
    "slug": "333",
    "collection": "334",
    "location": "335",
    "contents": "336",
    "mode": "29",
    "stats": "337",
    "path": "338",
    "previous": "70",
    "next": "72"
  },
  {
    "layout": "23",
    "date": "339",
    "title": "25",
    "tags": "340",
    "slug": "341",
    "collection": "342",
    "location": "343",
    "contents": "336",
    "mode": "29",
    "stats": "344",
    "path": "345",
    "previous": "71",
    "next": "73"
  },
  {
    "layout": "23",
    "date": "346",
    "title": "25",
    "slug": "347",
    "mf-photo": "348",
    "collection": "349",
    "contents": "328",
    "mode": "29",
    "stats": "350",
    "path": "351",
    "previous": "72",
    "next": "74"
  },
  {
    "layout": "23",
    "date": "352",
    "title": "25",
    "slug": "353",
    "collection": "354",
    "syndication": "355",
    "contents": "356",
    "mode": "29",
    "stats": "357",
    "path": "358",
    "previous": "73",
    "next": "75"
  },
  {
    "layout": "23",
    "date": "359",
    "title": "25",
    "tags": "360",
    "slug": "361",
    "collection": "362",
    "location": "363",
    "contents": "336",
    "mode": "29",
    "stats": "364",
    "path": "365",
    "previous": "74",
    "next": "76"
  },
  {
    "layout": "23",
    "date": "366",
    "title": "25",
    "tags": "367",
    "slug": "368",
    "collection": "369",
    "location": "370",
    "contents": "336",
    "mode": "29",
    "stats": "371",
    "path": "372",
    "previous": "75",
    "next": "77"
  },
  {
    "layout": "23",
    "date": "373",
    "title": "25",
    "tags": "374",
    "slug": "375",
    "collection": "376",
    "location": "377",
    "contents": "378",
    "mode": "29",
    "stats": "379",
    "path": "380",
    "previous": "76"
  },
  {
    "layout": "23",
    "date": "381",
    "title": "25",
    "slug": "382",
    "collection": "383",
    "photo": "384",
    "syndicateTo": "385",
    "syndication": "386",
    "contents": "387",
    "mode": "29",
    "stats": "388",
    "path": "389",
    "next": "79"
  },
  {
    "layout": "23",
    "date": "390",
    "title": "25",
    "mf-mp-syndicate-to": "391",
    "slug": "392",
    "collection": "393",
    "photo": "394",
    "contents": "395",
    "mode": "29",
    "stats": "396",
    "path": "397",
    "previous": "78",
    "next": "80"
  },
  {
    "layout": "23",
    "date": "398",
    "title": "25",
    "slug": "399",
    "collection": "400",
    "photo": "401",
    "contents": "395",
    "mode": "29",
    "stats": "402",
    "path": "403",
    "previous": "79",
    "next": "81"
  },
  {
    "layout": "23",
    "date": "404",
    "title": "25",
    "slug": "405",
    "collection": "406",
    "photo": "407",
    "contents": "395",
    "mode": "29",
    "stats": "408",
    "path": "409",
    "previous": "80",
    "next": "82"
  },
  {
    "layout": "23",
    "date": "410",
    "title": "25",
    "mf-photo": "411",
    "slug": "412",
    "collection": "413",
    "contents": "414",
    "mode": "29",
    "stats": "415",
    "path": "416",
    "previous": "81",
    "next": "83"
  },
  {
    "layout": "23",
    "date": "417",
    "title": "25",
    "mf-photo": "418",
    "slug": "419",
    "collection": "420",
    "contents": "414",
    "mode": "29",
    "stats": "421",
    "path": "422",
    "previous": "82"
  },
  {
    "layout": "23",
    "date": "24",
    "title": "25",
    "slug": "26",
    "collection": "423",
    "repostof": "424",
    "contents": "25",
    "mode": "29",
    "stats": "425",
    "path": "31",
    "next": "85"
  },
  {
    "layout": "23",
    "date": "107",
    "title": "25",
    "slug": "108",
    "collection": "426",
    "repostof": "427",
    "contents": "25",
    "mode": "29",
    "stats": "428",
    "path": "112",
    "previous": "84"
  },
  ["57"],
  ["57"],
  ["56"],
  ["54", "56"],
  ["55", "56"],
  ["50"],
  ["71", "72", "75", "76", "77", "50"],
  ["51", "52", "53"],
  ["51"],
  ["51"],
  ["52", "53"],
  ["52"],
  ["52"],
  ["53"],
  ["54"],
  ["55"],
  ["71", "72", "75", "76", "77"],
  ["64", "65"],
  ["65"],
  "repost",
  "https://twitter.com/imanpyudha/status/1494582833247305729",
  "2022-02-18T08:24:30.461Z",
  "30270",
  ["105"],
  ["429"],
  { "mode": 100644 },
  "repost/2022/02/18-30270",
  {
    "layout": "23",
    "date": "24",
    "title": "25",
    "slug": "26",
    "collection": "27",
    "repostof": "28",
    "contents": "25",
    "mode": "29",
    "stats": "30",
    "path": "31",
    "next": "32"
  },
  "https://www.github.com/gijswijs",
  "github",
  "Github",
  "https://www.linkedin.com/in/gijsvandam/",
  "linkedin",
  "LinkedIn",
  "https://www.researchgate.net/profile/Gijs_Van_Dam2",
  "researchgate",
  "ResearchGate",
  "https://bitcoinhackers.org/@gijswijs",
  "mastodon",
  "Mastodon",
  "https://www.twitter.com/gijswijs",
  "twitter",
  "Twitter",
  "/rss.xml",
  "rss",
  "RSS",
  "https://keybase.io/gijsvandam",
  "keybase",
  "Keybase",
  "https://orcid.org/0000-0002-6188-6859",
  "orcid",
  "ORCID",
  "https://scholar.google.com/citations?user=4dTcK4kAAAAJ&hl=en",
  "Google Scholar",
  "Home",
  ["430"],
  { "mode": 100644 },
  "home",
  "Research",
  "miksa/page.njk",
  ["430"],
  "<h2 id=\"papers\">Papers</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>paper</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2022</td>\n<td>van Dam, G. &amp; Kadir, R. A. (2022). Hiding Payments in Lightning Network with Approximate Differentially Private Payment Channels, in Computers &amp; Security, 2022 (in press)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td><a name=\"vandam2020\"></a>van Dam G., Kadir R.A., Nohuddin P.N.E., Zaman H.B. (2020) Improvements of the Balance Discovery Attack on Lightning Network Payment Channels. In: H&ouml;lbl M., Rannenberg K., Welzer T. (eds) ICT Systems Security and Privacy Protection. SEC 2020. IFIP Advances in Information and Communication Technology, vol 580. Springer, Cham. <a href=\"https://doi.org/10.1007/978-3-030-58201-2_21\">https://doi.org/10.1007/978-3-030-58201-2_21</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"preprints\">Preprints</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>paper</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2019</td>\n<td>van Dam, G., Kadir, R. A., Nohuddin, P. N. E., &amp; Zaman, H. B. (2019). Improvements of the Balance Discovery Attack on Lightning Network Payment Channels. Cryptology ePrint Archive, Report 2019/1385. <a href=\"https://ia.cr/2019/1385\">https://ia.cr/2019/1385</a> (<a href=\"#vandam2020\">peer reviewed version</a>)</td>\n</tr>\n</tbody></table>\n<h2 id=\"talks\">Talks</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>talk</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021</td>\n<td>Differential private payment channels in Lightning Network, Bitcoin Sydney Socratic Seminar (<a href=\"https://rumble.com/vl31wc-differentially-private-payment-channels.html\">video</a>)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>Privacy and Security Risks in the Lightning Network, National University of Singapore</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>Improvements of the Balance Discovery Attack on Lightning Network Payment Channels, IFIP Information Security Conference &amp; Privacy Conference</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>Analyzing Behavioral Heuristics of Pseudo Anonymity, Blockchain Developers Malaysia Meetup</td>\n</tr>\n</tbody></table>\n<h2 id=\"activities\">Activities</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>activity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021</td>\n<td>Master of Ceremonies at the 1st International Postgraduate Seminar on Industrial Revolution 4.0 (IPSIR4.0)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>Liaison, 6th International Visual Informatics Conference (IVIC&#39;19)</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>Committee Member, 4th Visual Informatics International Seminar (VIIS2018)</td>\n</tr>\n<tr>\n<td>2017 - present</td>\n<td><a href=\"https://www.meetup.com/blockchain-developers-malaysia\">Blockchain Developers Malaysia Meetup</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"white-papers\">White papers</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>white paper</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2014</td>\n<td>Beentjes, R., van Dam, G., Vlap, A. van Vlijmen &amp; J., te Wierik, B. <a href=\"/documents/Whitepaper-e-commerce.pdf\">Your company future-proof with ecommerce (dutch)</a></td>\n</tr>\n</tbody></table>\n<h2 id=\"grants\">Grants</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>white paper</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020</td>\n<td>Beneficiary of student grant for the Financial Cryptography and Data Security International Conference 2020, Kota Kinabalu, Sabah, Malaysia</td>\n</tr>\n</tbody></table>\n",
  { "mode": 100644 },
  "research",
  "Open Source",
  ["430"],
  "<h2 id=\"janos\">Janos</h2>\n<p><a href=\"https://neumannjs.github.io/Janos-starter/\">Janos</a> is a static site generator that runs entirely in the browser. It uses <a href=\"https://metalsmith.io/\">Metalsmith</a> with a bit of <a href=\"https://webpack.js.org/\">Webpack</a> magic sprinkled on top, to make it all work inside a browser. It is tightly integrated with GitHub to automatically host your site, using GitHub pages. But you don&#39;t have to know all those techniques; everybody can work with Janos without knowing all the ins and outs of those technologies.</p>\n<p>The site you are currently reading is built with Janos.</p>\n<p>You can start your own Janos site by going to the <a href=\"/admin\">admin</a> of this site or any other Janos website, and completing the wizard for creating your own website. The only thing you need is a GitHub account, which you can create for free.</p>\n<p>Every Janos site can be a starting point for creating a new Janos site. You can check out the <a href=\"https://github.com/neumannjs/Janos\">Janos repo</a> on Github and I sometimes write <a href=\"/topics/janos/\">posts on Janos</a> on this website.</p>\n<h2 id=\"boilerplate-paper\">Boilerplate paper</h2>\n<p><a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate paper</a> is a tool for creating scientific papers, posters and slideshows in Markdown and convert them to different formats like Pdf, Word, PowerPoint or Html. All the converting is done using Pandoc. Pandoc is open-source software created to convert documents from one format to another. Apart from Pandoc, there is more software required to be installed on your computer to make everything work. Getting all this software to work can be a bit overwhelming if you are new to this. That&#39;s why Boilerplate Paper comes with three Github Actions preconfigured. These Github Actions are automated workflows that convert your Markdown files into your final document using the Github servers. That way you can dip your toe in the water to see if writing papers like this works for you. If it does, you can install the prerequisite software on your local computer and experience the benefits of all the features Boilerplate Paper offers.</p>\n<p>You can check out the <a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate paper</a> on Github and I sometimes write <a href=\"/topics/boilerplate-paper/\">posts on Boilerplate paper</a> on this website.</p>\n",
  { "mode": 100644 },
  "open-source",
  "Ventures",
  ["430"],
  "<h2 id=\"mindbus\">Mindbus</h2>\n<p><a href=\"https://mindbus.nl\">Mindbus</a> is a web agency founded in 2002. A general web agency throughout its first years, Mindbus pivotted to a specific niche 2014 when it started its e-commerce platform for brick &amp; mortar book stores. Now in 2021 Mindbus almost exclusively serves bookstores in The Netherlands and Flanders. Almost 20% of the Dutch bookstores use the platform, and more than 8% of the Dutch online consumer book market runs over this platform.</p>\n<h2 id=\"doefiets\">Doefiets</h2>\n<p>Doefiets (Dutch for <em>do cycle</em>) was a community for cyclists founded in 2012. It featured articles on training and training schedules and had specific training schedules geared towards famous European cyclo&#39;s like <em>La Marmotte</em>. The website included a webshop that offered cycling gear. The community failed to garner enough traction and was shuttered in 2018 after exploratory talks with the Royal Dutch Cyclist Union (KNWU) about collaborating amounted to nothing tangible.</p>\n<h2 id=\"uwebshop\">uWebshop</h2>\n<p>uWebshop was a spin-off of Mindbus in 2011/2012 and offered a package for the .Net CMS <em>Umbraco</em>. With this package you could easily set up your own webshop within the Umbraco CMS. The company failed to become profitable and was shut down in 2015.</p>\n",
  { "mode": 100644 },
  "ventures",
  "Resume",
  ["430"],
  "<h2 id=\"professional-experience\">Professional experience</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>position</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2017-present</td>\n<td>Freelance IT consultant, Kuala Lumpur, Malaysia</td>\n</tr>\n<tr>\n<td>2002-present</td>\n<td>Founder/Owner, Mindbus Webdevelopment, Leiden, The Netherlands/Lisbon, Portugal</td>\n</tr>\n<tr>\n<td>2000-2002</td>\n<td>Project Manager, Valoris, The Hague, The Netherlands/Antwerp, Belgium</td>\n</tr>\n<tr>\n<td>2000-2000</td>\n<td>Web Developer, Websilon, The Hague, The Netherlands</td>\n</tr>\n<tr>\n<td>1999-2000</td>\n<td>Web Developer, Matchcare, Utrecht, The Netherlands</td>\n</tr>\n<tr>\n<td>1997-2000</td>\n<td>Web Master, Faculty of Veterinary Science, Utrecht University, The Netherlands</td>\n</tr>\n</tbody></table>\n<h2 id=\"education\">Education</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>education</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2018-present</td>\n<td>PhD Computer Science, National University of Malaysia, Institute of IR 4.0, Malaysia (ongoing)</td>\n</tr>\n<tr>\n<td>1995-2000</td>\n<td>MSc Veterinary Science, Utrecht University, The Netherlands</td>\n</tr>\n</tbody></table>\n<h2 id=\"publications--whitepapers\">Publications &amp; Whitepapers</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>publication</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2022</td>\n<td>van Dam, G. &amp; Kadir, R. A. (2022). Hiding Payments in Lightning Network with Approximate Differentially Private Payment Channels, in Computers &amp; Security, 2022 (in press)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>van Dam, G., Kadir, R. A., Nohuddin, P. N. E., &amp; Zaman, H. B. (2020). Improvements of the Balance Discovery Attack on Lightning Network Payment Channels (pp. 313-323). <a href=\"https://doi.org/10.1007/978-3-030-58201-2_21\">https://doi.org/10.1007/978-3-030-58201-2_21</a></td>\n</tr>\n<tr>\n<td>2014</td>\n<td>Whitepaper: Your company future-proof with ecommerce (dutch)</td>\n</tr>\n</tbody></table>\n<h2 id=\"training--certification\">Training &amp; Certification</h2>\n<table>\n<thead>\n<tr>\n<th>year</th>\n<th>training/certification</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021</td>\n<td>Lightning Network Seminar Series, Chaincode Labs, New York (online)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>An Introduction To Probability In Computing, IIT Madras (online)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>iFintell workshop series: R language, Python, STATA &amp; MATLAB, Big Data analytics, AI &amp; ML</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>Workshop Microsoft Azure, Jupyter Notebook and R</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>EASP Workshop Multi-level Modelling, University of Nottingham Malaysia</td>\n</tr>\n<tr>\n<td>2012-2013</td>\n<td>Fast Forward Entrepreneurial Development, ScaleUp Company</td>\n</tr>\n<tr>\n<td>2010</td>\n<td>Google Analytics Individual Qualification</td>\n</tr>\n<tr>\n<td>2006</td>\n<td>Designing and Implementing Databases with Microsoft SQL Server 2000 Enterprise Edition</td>\n</tr>\n<tr>\n<td>2004</td>\n<td>PRINCE2 Foundation</td>\n</tr>\n<tr>\n<td>2002</td>\n<td>Designing and Implementing Data Warehouses with Microsoft SQL Server 7.0</td>\n</tr>\n<tr>\n<td>2001</td>\n<td>Valoris High Potential program, Developing managerial skills</td>\n</tr>\n</tbody></table>\n",
  { "mode": 100644 },
  "resume",
  "About me",
  ["430"],
  "About",
  "<p>Researcher, developer and business founder in no particular order.</p>\n<p>I live in Malaysia. For all intents and purposes you could say I live in the amazing city of Kuala Lumpur, but that would rub the real KLites in the wrong way, since I don&#39;t live in the city proper.</p>\n<p>Before that I lived in Amsterdam.</p>\n<h2 id=\"background\">Background</h2>\n<p>It is a bit of a mixed bag. I have a master&#39;s degree in veterinary science. I have never worked (and wouldn&#39;t be allowed to work) as a veterinarian, since I never did a residency and that&#39;s a requirement for a license to practice veterinarian medicin. By now it has been so long since I finished my studies that I have a hard time telling apart cats and dogs nowadays.</p>\n<p>I was always a computer nerd, and from 1995 onwards focussed on web development in my spare time. While finishing my studies, I started to work full-time for a web company in 1999. I enjoyed the peak of the dot-com bubble, and also the bursting. When my then-employer went bankrupt I thought it smart to start my own web development company, called Mindbus. This was in 2002. That company has been my sole source of income since then. At it&#39;s peak we had shy of 30 people working for Mindbus. Untill 2020 we had two offices, one in the city of Leiden, the Netherlands, and another in the city of Lisbon, Portugal. Currently Mindbus is a nimble company with one office (the one in Leiden) and a distributed team of people. We mainly work on this e-commerce platform that we developed for brick-and-mortar book stores. It&#39;s allowing Dutch book stores to be like the indomitable Gauls holding out against the invaders. But this time the invaders aren&#39;t the Romans, but Amazon and (only known in The Netherlands) Bol.</p>\n<p>We moved to Malaysia in January 2017. My wife and I always had this dream of living in a foreign country for a few years. So when she could get a job as an assistant professor at a Malaysian university we didn&#39;t have to think twice about it. We moved with our kids, then 5 months and 4 years old.</p>\n<p>In an unexpected way moving to Malaysia opened up the opportunity to make a career switch. I wasn&#39;t spending as much time on Mindbus anymore (and it thrived, so I am not sure what that says about my involvement) and the cost of living was such that I could afford to do a full-time PhD at the National University of Malaysia. So that&#39;s what I am doing now: A PhD in computer science. My research is on privacy in the context of second layer cryptocurrency solutions.</p>\n<p>In my spare time I work on two open source projects. One is a fork of the static site generator Metalsmith, called <a href=\"https://neumannjs.github.io/Janos-starter/\">Jonas</a>, that runs entirely in the browser. The site you are currently looking at is built with Jonas. The other is a tool to easily make papers, posters and presentations in LaTeX, using markdown and Pandoc. It is called <a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate Paper</a>. Both projects are a long way from a 1.0 release, but in the spirit of eating your own dog food, I use them both extensively.</p>\n",
  { "mode": 100644 },
  "about",
  "What am I doing now?",
  ["430"],
  "Now",
  "now",
  "<p>Right now I&#39;m focusing on finishing my PhD. This still requires writing and publishing an article, and distill the last three years of research in a thesis. I hope to submit my thesis in Q1 or Q2 of 2022, and then start planning the move back to Amsterdam. But everything depends on finding nice work for both me and my wife. There is no reason to go back for a shitty job. Life here is way to good for that.</p>\n<p>Since the lockdown measures are now slowly being lifted here in the Klang valley, I can finally do some sports again. The swimming pool near our condo just opened up again. They also have a small gym there. I am not much of a gym-person, but I promised myself to check out the equipment.</p>\n<p>The one thing that I hope for is that schools open up soon. Out of the past 18 months my kids&#39; school has been closed for 14 to 15 months. And having two young children around isn&#39;t conducive for research. And it is definitely not conducive for the social development of my kids. But arguments like that carry no weight at all here in Malaysia.</p>\n<p>I would like to learn <a href=\"https://www.rust-lang.org/\">Rust</a>, and more specifically <a href=\"https://learn.sapio-lang.org/\">Sapio</a>, which is a way of creating smart Bitcoin contracts in Rust. Sapio is a &quot;port&quot; and an extension of Peter Wuille&#39;s <a href=\"http://bitcoin.sipa.be/miniscript/\">Miniscript</a> built in Rust. But for now this has to go on the back burner, because I need to turn all my attention to finishing my thesis. I need to curb any tendency to procrastinate in the next few months.</p>\n<p>Updated: October 2021</p>\n",
  { "mode": 100644 },
  "Contact",
  ["430"],
  "<p>By <em>far</em> the best method to contact me is sending a mail to&nbsp;<script>a='gvandam'; b='mail'; c='.com'\ndocument.write('<A hre'+'f=\"mai'+'lto:'+a+'@g'+b+c+'\">');\ndocument.write(a+'@g'+b+c+'</a>');\n</script></p>\n<p>If you want to follow me, you can check out my social media accounts in the footer below.</p>\n",
  { "mode": 100644 },
  "contact",
  "Image conversion, resizing and compression with WebAssembly",
  "2021-03-31T00:00:00.000Z",
  "miksa/post.njk",
  ["431", "432"],
  "<p>Image conversion and resizing for the web can be quite fiddly. Take responsive websites for instance. You want to show a smaller version of your image on smaller devices: You don&#39;t need to download a 1080px wide image to show on a 360px wide device, especially since that device is likely constrained in the amount of bandwidth it has. Then again when your website is shown on an ultra HD screen with 3840x2160 resolution 1080 is maybe even too small.</p>\n<p>Apart from multiple sizes, you also want to offer multiple formats. Modern browsers support new(er) image formats like webp and avif offer better compression for comparable image quality. Using these formats you can decrease the total download size of your page, while improving the overall experience for the user.\nBut you just can&#39;t assume (yet) that all browsers support those newer formats, so you have to provide older formats as a fallback option. All in all the amount of different files you have to offer for just a single image on a web page starts to become quite large and the whole thing becomes, like I said, fiddly.</p>\n<!-- more -->\n<p>Now look at the gif below.</p>\n<p><picture><img src=\"/images/copy-paste-image.gif\" alt=\"animated gif of copy-pasting images with Janos\" title=\"Copy-pasting an image in Janos\" loading=\"lazy\" decoding=\"async\" width=\"888\" height=\"662\"/><figcaption>Copy-pasting an image in Janos</figcaption></picture></p>\n<p>What is happening here? The gif shows the process of screen clipping an image and then pasting it inside the Janos editor. Upon pasting the image, the image is &quot;uploaded&quot;, and that starts a process of resizing and conversion. I use scare quotes around <em>uploaded</em>, because there isn&#39;t anything uploaded yet. Janos uses a small git client under the hood that stores the file in memory as a git blob. Only after committing to GitHub files are really uploaded to the GitHub servers. The pasted image is resized to three different sizes and three different formats (avif, webp and jpg), so in total 9 versions of the image are created. The original image is also stored in all its unresized greatness, making the total amount of files a nice 10. If the original image is copy-pasted like in the example above, it is stored as a png file. If the image is &quot;uploaded&quot; as a file it&#39;s kept as-is.</p>\n<p>This workflow takes the fiddle out of fiddly and leaves us with a nice process of putting images inside a post without hassle. But the attentive reader might ask:</p>\n<blockquote>\n<p>How does this work?\n-- Attentive reader</p>\n</blockquote>\n<p>Since an actual upload hasn&#39;t happened yet, this whole process has to take place inside the browser and it uses WebAssembly to make it happen.</p>\n<h2 id=\"conversion-and-resizing-with-webassembly\">Conversion and resizing with WebAssembly</h2>\n<p>GoogleChromeLabs has made the <a href=\"https://github.com/GoogleChromeLabs/squoosh\">Squoosh app</a>, an amazing web app that offers image compression in all the formats you want. It also offers a Squoosh cli for compressing multiple files at once. I forked Squoosh and made a simple (and hacky) version of the Squoosh cli that runs in the browser. It is like a <em>headless</em> version of the Squoosh app, if you will. For each format Squoosh supports, it uses a codec (did you know codec is a portmanteau of coder-decoder?) developed in either Rust or C++ and compiled to WebAssembly. So this enables the browser to do some pretty heavy lifting with regards to resizing and converting our image. If I run it on my laptop I can hear the fans spin up to cope with the demands of the cpu.</p>\n<h2 id=\"from-markdown-to-html\">From Markdown to html</h2>\n<p>After pasting the image, the Markdown syntax for inserting an image is pasted in the document with a reference to the original file. But that is obviously not the file we want to show in the resulting HTML. In our HTML we want an picture element that contains all our files in all formats and sizes. It should look like this:</p>\n<pre><code class=\"language-html\">&lt;picture\n  &gt;&lt;source\n    srcset=&quot;\n      /images/ever-given_s.avif 461w,\n      /images/ever-given_m.avif 692w,\n      /images/ever-given_l.avif 922w\n    &quot;\n    type=&quot;image/avif&quot; /&gt;\n  &lt;source\n    srcset=&quot;\n      /images/ever-given_s.webp 461w,\n      /images/ever-given_m.webp 692w,\n      /images/ever-given_l.webp 922w\n    &quot;\n    type=&quot;image/webp&quot; /&gt;\n  &lt;img\n    srcset=&quot;\n      /images/ever-given_s.jpg 461w,\n      /images/ever-given_m.jpg 692w,\n      /images/ever-given_l.jpg 922w\n    &quot;\n    src=&quot;/images/ever-given_s.jpg&quot;\n    alt=&quot;Container ship Ever Given&quot;\n    title=&quot;Container ship Ever Given stuck in the Suez Canal&quot;\n    loading=&quot;lazy&quot;\n    decoding=&quot;async&quot;\n    width=&quot;922&quot;\n    height=&quot;480&quot;\n/&gt;&lt;/picture&gt;\n&lt;figcaption&gt;/images/todo-tree.jpg&lt;/figcaption&gt;</code></pre>\n<p>The above snippet is derived from this <a href=\"https://www.stefanjudis.com/snippets/a-picture-element-to-load-correctly-resized-webp-images-in-html/\">snippet</a> with some minor adjustments. It uses <code>srcSet</code> to offer the different sizes of the image. It uses different <code>srcSet</code> to offer the different formats, and it uses <code>src</code> to offer the smallest version to browsers that don&#39;t support any of it. Since <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">width &amp; height are important</a> for rendering pages fast without layout shifts, we add the width and height from the <em>largest</em> version of the image. This did result in some problems that took quite some time to get figured out: </p>\n<p>Apparently the use of <code>width</code> and <code>height</code> nullifies any use of the <code>sizes</code> attribute in combination with the <code>srcSet</code>. The <code>sizes</code> attribute is meant for defining a set of media conditions (e.g. screen widths) and indicates what image size would be best to choose. The browser uses that info in combination with other information (like device-pixel-ratio) to determine which image file it will download. But because we want to use <code>width</code> and <code>height</code> this means that the <code>sizes</code> attribute is unavailable to us. So we are forced to use good ol&#39; css to indicate the different image sizes under different media conditions. </p>\n<pre><code class=\"language-css\">.article img {\n  max-width: 100%;\n  height: auto;\n}\nfigcaption {\n  text-align: center;\n  margin-top: -1.5rem;\n  font-style: italic;\n}\n@media (min-width: 40rem) {\n  .article img {\n    max-width: calc(100% - 6rem);\n    height: auto;\n    margin: 0 3rem;\n  }\n}\n@media (min-width: 80rem) {\n  .article img {\n    max-width: calc(100% - 12rem);\n    height: auto;\n    margin: 0 6rem;\n  }\n}</code></pre>\n<h2 id=\"metalsmith-plugin-for-the-picture-element\">Metalsmith plugin for the picture element</h2>\n<p>The final ingredient in this mix is a metalsmith plugin that creates the HTML picture element, based on the image referenced in the Markdown. It detects the image, figures out what kind of resized files are available and then converts the Markdown to a picture element. So in the end the picture will look like this:</p>\n<p><picture><source srcSet=\"/images/ever-given_s.avif 540w,/images/ever-given_m.avif 810w,/images/ever-given_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/ever-given_s.webp 540w,/images/ever-given_m.webp 810w,/images/ever-given_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/ever-given_s.jpg 540w,/images/ever-given_m.jpg 810w,/images/ever-given_l.jpg 1080w\" src=\"/images/ever-given_s.jpg\" alt=\"Container ship Ever Given\" title=\"Container ship Ever Given stuck in the Suez Canal\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"609\"/><figcaption>Container ship Ever Given stuck in the Suez Canal</figcaption></picture></p>\n<h2 id=\"releasing-everything-as-separate-modules\">Releasing everything as separate modules</h2>\n<p>Currently everything is integrated inside the Janos code base. But I plan on releasing both the <em>headless</em> Squoosh library and the Metalsmith plugin as separate npm modules. When that is done and dusted I will do write-up on how to use and configure said modules to suit your needs.</p>\n",
  { "mode": 100644 },
  "post/image-conversion-resizing-and-compression-with-webassembly",
  ["433"],
  "<p>Image conversion and resizing for the web can be quite fiddly. Take responsive websites for instance. You want to show a smaller version of your image on smaller devices: You don&#39;t need to download a 1080px wide image to show on a 360px wide device, especially since that device is likely constrained in the amount of bandwidth it has. Then again when your website is shown on an ultra HD screen with 3840x2160 resolution 1080 is maybe even too small.</p>\n<p>Apart from multiple sizes, you also want to offer multiple formats. Modern browsers support new(er) image formats like webp and avif offer better compression for comparable image quality. Using these formats you can decrease the total download size of your page, while improving the overall experience for the user.\nBut you just can&#39;t assume (yet) that all browsers support those newer formats, so you have to provide older formats as a fallback option. All in all the amount of different files you have to offer for just a single image on a web page starts to become quite large and the whole thing becomes, like I said, fiddly.</p>",
  "Measuring your writing progress with a git word count",
  "2021-02-26T00:00:00.000Z",
  ["434", "435", "436"],
  "<p>Writing a scientific paper is hard. Doing your PhD is hard. Writing your thesis is hard. And to make me feel even more miserable I decided to measure my progress by counting the nett change in words I achieve throughout each day.\nI am by no means a productivity guru and I don&#39;t know whether word count is a useful indicator for measuring the progress of a paper. That being said, it is a reality check to see how fast my  work is progressing.\nSo without further ado here&#39;s the Powershell command that outputs the wordcount for the last 25 days based on git commits.</p>\n<pre><code class=\"language-powershell\">for($i = 0; $i -lt 25; $i++){$j = $i + 1; Write-Host (get-date (get-date).addDays(-$i) -UFormat &quot;%Y%m%d&quot;) ((git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;| Select-String -Pattern &quot;^\\+.*&quot; | Measure-Object -word | select -ExpandProperty Words) - (git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;  -- &quot;***.md&quot;| Select-String -Pattern &quot;^-.*&quot; | Measure-Object -word | select -ExpandProperty Words)) }</code></pre>\n<!-- more -->\n<h2 id=\"what-does-it-do\">What does it do?</h2>\n<p>At the core of this script is the following git command:</p>\n<pre><code>git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;</code></pre><p>This command uses <code>git diff</code> (duh!) with the <code>--word-diff</code> option which marks the actual word being changed instead of the entire line that contains it. The latter is the default behavior of <code>git diff</code> and is not what we want when performing a word count. <code>porcelain</code> denotes the special line-based format for <code>word-diff</code> meant for script consumption, which is what we will do next. <code>-- &quot;***.md&quot;</code> only considers markdown files which are the files that contain all the content of my paper in <a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate Paper</a>. It is important to note that if you don&#39;t commit regularly (at least daily) this word count doesn&#39;t come up with accurate data.</p>\n<p>If you run only this command, you would get something like this.</p>\n<pre><code>~\ndiff --git a/e-diff-paper/paper/03_method.md b/e-diff-paper/paper/03_method.md\nindex a3b4dfe..c4a565c 100644\n--- a/e-diff-paper/paper/03_method.md\n+++ b/e-diff-paper/paper/03_method.md\n@@ -1,8 +1,8 @@\n # Method\n~\n\n~\n Our goal is to obtain differential privacy for the balance of a Lightning Network payment channel. This goal differs from the original setting of differential privacy. Originally differential privacy\n-was\n  meant to ensure that adding or deleting a record\n-from\n+in\n  a database did not change the answer to statistical differential private queries significantly. To achieve that, noise is added to the query answer. By observing this noisy answer \n-a passive\n+an\n  observer is unable to discern if a specific record is in the database or not, regardless of the information this observer possesses about the other records in the database. This adding of noise is done through a probabilistic algorithm applied to the data set contained in the database.\n~\n\n~\n Our case is different in a consequential way. A passive observer can use a BDA again and again to get a reading on the balance. The information that this observer obtains is comparable to a stream of data. To cater to our situation we expand the basic definition of (approximate) differential privacy to \n-streams\n+streams,\n  similarly to [@Chan2011].</code></pre><p>Those lines starting with <code>-</code> or <code>+</code> are the ones we are interested in, because those are the words that have been deleted and added. We pipe the results of that command into <code>Select-String</code> which is kind of like grep for Powershell.</p>\n<pre><code>Select-String -Pattern &quot;^\\+(?!\\+\\+\\s).*&quot;</code></pre><p>The regex pattern matches with all lines starting with <code>+</code> except if it is followed by <code>++</code> (we use the negative lookahead to check for that) because the three plus-signs are use to indicate file names that have additions, not the addition itself. If you run the above two commands piped together you would get a result like this:</p>\n<pre><code>+#\n+## Just-In-Time Routing\n+Just-in-time routing or JIT routing [@Pickhardt2019] was proposed as a solution to mitigate routing failures due to insufficient funds. LN uses source based routing, where the send \ner of the payment has to guess the route over which to send a payment. Since a node is only aware of the balances of channels that it is part of, a sender node can only guess if a r\noute with other channels has enough liquidity to process the payment. This can lead to relatively large amounts of failed payments due to insufficient funds somewhere along the rout \ne.\n+JIT Routing tries to make the routing process more like best effort routing known in IP-forwarding. The concept depends on nodes quickly rebalancing their channels upon receiving a\n routing request (HTLC) for which they have insufficient funds. Because a node along the route has more knowledge of its local neighborhood than the sender node, it can use that kno\nwledge to perform a small transaction within its local neighborhood of channels to rebalance funds in such a way that original routing request can proceed. Given that the rebalancin \ng succeeds within the timeframe of the routing request, the requests now succeeds where it would have failed without JIT routing.\n+in\n+an\n+streams,</code></pre><p>Although there is some Markdown markup that shouldn&#39;t be counted as words (like <code>#</code> and <code>##</code>) this is good enough for my purposes. So we pipe the results into our next two commands.</p>\n<pre><code>Measure-Object -word | select -ExpandProperty Words</code></pre><p>These are plain and simple, the first command performs the actual word count, but since Powershell always returns an object, we need the latter command to enumerate the values of the object and select the value. Everything piped together returns just a number.</p>\n<pre><code>248</code></pre><p>Now we do the same thing for the deleted words. We run the same commands but now with a different regex expression: <code>Select-String -Pattern &quot;^\\-(?!\\-\\-\\s).*&quot;</code></p>\n<p>We substract the deleted words from the added words and we have our nett change in words for the day. All that is left to do is to wrap everything in a loop that goes back as much days as you want (25 in the above script) and outputs the date with the word count for that date.</p>\n<p>So this is my progress for the past few days of a particular paper I am writing:</p>\n<pre><code>20210226 237\n20210225 0\n20210224 0\n20210223 0\n20210222 0\n20210221 0\n20210220 0\n20210219 0\n20210218 591\n20210217 190\n20210216 332\n20210215 0\n20210214 0\n20210213 0\n20210212 0\n20210211 925\n20210210 0\n20210209 382</code></pre><p>I guess I was just busy with other things...</p>\n",
  { "mode": 100644 },
  "post/measuring-your-writing-progress-with-a-git-word-count",
  ["433"],
  "<p>Writing a scientific paper is hard. Doing your PhD is hard. Writing your thesis is hard. And to make me feel even more miserable I decided to measure my progress by counting the nett change in words I achieve throughout each day.\nI am by no means a productivity guru and I don&#39;t know whether word count is a useful indicator for measuring the progress of a paper. That being said, it is a reality check to see how fast my  work is progressing.\nSo without further ado here&#39;s the Powershell command that outputs the wordcount for the last 25 days based on git commits.</p>\n<pre><code class=\"language-powershell\">for($i = 0; $i -lt 25; $i++){$j = $i + 1; Write-Host (get-date (get-date).addDays(-$i) -UFormat &quot;%Y%m%d&quot;) ((git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;   -- &quot;***.md&quot;| Select-String -Pattern &quot;^\\+.*&quot; | Measure-Object -word | select -ExpandProperty Words) - (git diff --word-diff=porcelain &quot;@{$j days ago}&quot; &quot;@{$i days ago}&quot;  -- &quot;***.md&quot;| Select-String -Pattern &quot;^-.*&quot; | Measure-Object -word | select -ExpandProperty Words)) }</code></pre>",
  "Pandoc-filter for highlighting to-dos in LaTeX output",
  "2021-02-23T00:00:00.000Z",
  ["437", "438", "439", "440"],
  "<p>While writing my papers I try not to get bogged down too much. So if a paragraph doens&#39;t flow right I just type <code>TODO: rewrite</code> on the line below it, and continue writing. When I think of something that I shouldn&#39;t forget, like an extra analysis to run I just write it down as a todo in the running text of my paper. I also write thoughts on my paper as a todo. Ideas on structure, whether I should maybe rearrange paragraphs or approach a subject differently, it all ends up as a todo in the running text.</p>\n<p>When running the VSCode task for converting my paper to PDF (using Pandoc) it puts all the todos into the running text. That&#39;s fine by me, it helps as an extra reminder that stuff still needs to happen. But I wanted the todos to be visually different from the running text, so that it stands apart and doesn&#39;t confuse people who are reading my draft. That is where my Pandoc filter comes into play.</p>\n<!-- more -->\n<p>While working inside VSCode I keep track off all todo&#39;s with the <a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\">Todo Tree</a> extension. This extension searches your workspace for comment tags like TODO and FIXME, and displays them in a tree view in the explorer pane.</p>\n<p><picture><source srcSet=\"/images/todo-tree_s.avif 461w,/images/todo-tree_m.avif 692w,/images/todo-tree_l.avif 922w\" type=\"image/avif\"/><source srcSet=\"/images/todo-tree_s.webp 461w,/images/todo-tree_m.webp 692w,/images/todo-tree_l.webp 922w\" type=\"image/webp\"/><img srcSet=\"/images/todo-tree_s.jpg 461w,/images/todo-tree_m.jpg 692w,/images/todo-tree_l.jpg 922w\" src=\"/images/todo-tree_s.jpg\" alt=\"Todo Tree in VSCode\" title=\"/images/todo-tree.jpg\" loading=\"lazy\" decoding=\"async\" width=\"922\" height=\"480\"/><figcaption>/images/todo-tree.jpg</figcaption></picture></p>\n<p>But to keep track of the todo&#39;s when the paper is converted to PDF I created a Pandoc filter that highlights all comments in LaTeX output formats. It is really simple:</p>\n<pre><code class=\"language-lua\">if FORMAT:match &#39;latex&#39; then\n    function Para(el)\n        if pandoc.utils.equals(pandoc.Str &#39;TODO:&#39;, el.content[1]) then \n            table.insert(el.content, 1, pandoc.RawInline(&#39;latex&#39;, &#39;\\\\hl{&#39;))\n            table.insert(el.content, pandoc.RawInline(&#39;latex&#39;, &#39;}&#39;))\n        end\n        return el\n    end\nend</code></pre>\n<p>The only prerequisite is that you put the <code>soul</code> package in the preamble of your LaTeX, because that is the package used for the highlighting. So somewhere in your preamble you should put this:</p>\n<pre><code class=\"language-latex\">\\usepackage{soul}</code></pre>\n<p>Now, if you output the paper, the todos are highlighted.</p>\n<p><picture><source srcSet=\"/images/todo-in-pdf_s.avif 540w,/images/todo-in-pdf_m.avif 810w,/images/todo-in-pdf_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/todo-in-pdf_s.webp 540w,/images/todo-in-pdf_m.webp 810w,/images/todo-in-pdf_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/todo-in-pdf_s.jpg 540w,/images/todo-in-pdf_m.jpg 810w,/images/todo-in-pdf_l.jpg 1080w\" src=\"/images/todo-in-pdf_s.jpg\" alt=\"Todo in LaTeX PDF output\" title=\"Todo in LaTeX PDF output\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"270\"/><figcaption>Todo in LaTeX PDF output</figcaption></picture></p>\n",
  { "mode": 100644 },
  "post/pandoc-filter-for-highlighting-to-dos-in-latex-output",
  ["433"],
  "<p>While writing my papers I try not to get bogged down too much. So if a paragraph doens&#39;t flow right I just type <code>TODO: rewrite</code> on the line below it, and continue writing. When I think of something that I shouldn&#39;t forget, like an extra analysis to run I just write it down as a todo in the running text of my paper. I also write thoughts on my paper as a todo. Ideas on structure, whether I should maybe rearrange paragraphs or approach a subject differently, it all ends up as a todo in the running text.</p>\n<p>When running the VSCode task for converting my paper to PDF (using Pandoc) it puts all the todos into the running text. That&#39;s fine by me, it helps as an extra reminder that stuff still needs to happen. But I wanted the todos to be visually different from the running text, so that it stands apart and doesn&#39;t confuse people who are reading my draft. That is where my Pandoc filter comes into play.</p>",
  "Super easy tip for slide animation with Pandoc and reveal.js",
  "2021-02-15T00:00:00.000Z",
  ["441", "442", "443"],
  "<p>I found this super easy alternative way to animate your slides with reveal.js that works out of the box with Markdown and Pandoc. Here is how to do it.</p>\n<p>Last week I had to give a progress presentation about the current state of my PhD, and I can whip those up in no time. I use <a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate Paper</a> not only for writing my papers, but also for presentations like this.</p>\n<p>I write the presentation in Markdown and then convert it to <a href=\"https://revealjs.com\">reveal.js</a>. But sometimes you want something else than the default sliding transition that reveal.js provides.</p>\n<!-- more -->\n<p><picture><img src=\"/images/default-sliding.gif\" alt=\"Default sliding transition in reveal.js\" title=\"Default sliding transition in reveal.js\" loading=\"lazy\" decoding=\"async\" width=\"1000\" height=\"704\"/><figcaption>Default sliding transition in reveal.js</figcaption></picture></p>\n<p>Reveal.js got you covered with <a href=\"https://revealjs.com/auto-animate/\">auto-animate</a>. It&#39;s a feature that automatically finds matching elements between two slides and animates between them. It&#39;s nothing too fancy and for me it perfectly fits the job at hand. All you need to do is add <code>data-auto-animate</code> to two adjacent slide <code>&lt;section&gt;</code> elements.</p>\n<p>And the beautiful thing is, it works out of the box with Pandoc slides using heading attributes. In Pandoc headings can be assigned attributes at the end of the heading line.</p>\n<pre><code>{#identifier .class key=value}</code></pre><p>In this case we are going to use the key/value attribute to add <code>data-auto-animate</code> to the reveal.js section. Just add <code>{data-auto-animate=}</code> (it needs only the key and no value, but it requires the <code>=</code>) to the end of the slide title, like so:</p>\n<pre><code>## Slide 1 {data-auto-animate=}\n\nSlide 1 content\n\n## Slide 2 {data-auto-animate=}\n\nSlide 2 content</code></pre><p>And that&#39;s it! Once you convert your Markdown into reveal.js the slides are now animated using auto-animate.</p>\n<p><picture><img src=\"/images/auto-animate.gif\" alt=\"Auto-animate transition in reveal.js\" title=\"Auto-animate transition in reveal.js\" loading=\"lazy\" decoding=\"async\" width=\"1000\" height=\"704\"/><figcaption>Auto-animate transition in reveal.js</figcaption></picture></p>\n",
  { "mode": 100644 },
  "post/super-easy-tip-for-slide-animation-with-pandoc-and-reveal.js",
  ["433"],
  "<p>I found this super easy alternative way to animate your slides with reveal.js that works out of the box with Markdown and Pandoc. Here is how to do it.</p>\n<p>Last week I had to give a progress presentation about the current state of my PhD, and I can whip those up in no time. I use <a href=\"https://github.com/neumannjs/boilerplate-paper\">Boilerplate Paper</a> not only for writing my papers, but also for presentations like this.</p>\n<p>I write the presentation in Markdown and then convert it to <a href=\"https://revealjs.com\">reveal.js</a>. But sometimes you want something else than the default sliding transition that reveal.js provides.</p>",
  "Running c-lightning in Simverse with plugins",
  "2020-12-02T00:00:00.000Z",
  ["444", "445"],
  "<p>The goal is to run c-lightning with plugins in a local testing cluster. For my cluster I use <a href=\"https://github.com/darwin/simverse\">Simverse</a>.\nSimverse allows for additional command line arguments to be passed to <code>lightningd</code>, so it should be possible to run <code>lightningd</code> with the <code>plugin</code> argument.</p>\n<p>Let&#39;s first clone our plugin. We will be using one of the plugins that are available through Lightningd on Github.</p>\n<pre><code>cd ~\\simverse\\_repos\ngit clone https://github.com/lightningd/plugins.git --depth 1</code></pre><p>We put the plugin in the <code>_repos</code> folder, because it is assumed that the plugin is there when the cluster is being build. (Also: throughout this article we assume your simverse folder is inside your home folder. If that is not the case, adjust it accordingly)</p>\n<p>Since all nodes in Simverse run inside Docker containers, that plugin-file should be made available inside the Docker context folder. The <code>_repos</code> folder is not part of that context (each container gets its own context) so we have to copy the file from the <code>_repos</code> folder to the Docker context folder. Luckily Simverse works with the concept of recipes. A recipe describes how your cluster should look like. A recipe is a bash script that uses a library called cookbook that can be used to build your cluster step-by-step. Since it is &quot;just&quot; a bash script, you can do anything bash can do to tweak your cluster.</p>\n<p>We will create a recipe that creates a cluster with three c-lightning nodes, running on a bitcoind back-end. </p>\n<!-- more -->\n<h2 id=\"simverse-recipe\">Simverse Recipe</h2>\n<pre><code class=\"language-bash\">#!/usr/bin/env bash\n\n. cookbook/cookbook.sh\n\nprelude\n\nadd bitcoind\n\nLIGHTNINGD_EXTRA_PARAMS=&#39;--plugin=/home/simnet/.lightning/plugins/jitrebalance.py&#39;\n\nadd lightningd alice\ncp -r &quot;$SIMVERSE_REPOS/plugins/jitrebalance&quot; &quot;$SIMVERSE_WORKSPACE/$SIMNET_NAME/_volumes/lightning-data-alice/plugins&quot;\n\nadd lightningd bob\ncp -r &quot;$SIMVERSE_REPOS/plugins/jitrebalance&quot; &quot;$SIMVERSE_WORKSPACE/$SIMNET_NAME/_volumes/lightning-data-bob/plugins&quot;\n\nadd lightningd charlie\ncp -r &quot;$SIMVERSE_REPOS/plugins/jitrebalance&quot; &quot;$SIMVERSE_WORKSPACE/$SIMNET_NAME/_volumes/lightning-data-charlie/plugins&quot;\n\n\n# generate init script to build connections\ncat &gt; init &lt;&lt;EOF\n#!/usr/bin/env bash\n\nset -e -o pipefail\n\n# connect LN nodes\nconnect alice charlie\nconnect charlie bob\nconnect bob alice\nEOF\nchmod +x init</code></pre>\n<p>What is happening here? First we import the <code>cookbook</code> library. <code>prelude</code> does all the preliminary stuff needed for every cluster. After this we can start adding our back-end and our Lighning nodes. <code>add bitcoind</code> adds the bitoind node (duh!). Before we add our c-lightning nodes we set the <code>LIGHTNINGD_EXTRA_PARAMS</code> variable. This variable is passed to <code>lightningd</code> when starting up the Docker container. We use it to set the <code>plugin</code> argument.</p>\n<p>We can now add our first lightning node, called &quot;alice&quot;: <code>add lightningd alice</code>\nAfter this we can copy our plugin to the Docker context folder with the following command:</p>\n<pre><code class=\"language-bash\">cp -r &quot;$SIMVERSE_REPOS/plugins/jitrebalance&quot; &quot;$SIMVERSE_WORKSPACE/$SIMNET_NAME/_volumes/lightning-data-alice/plugins&quot;</code></pre>\n<p>We use several variables that may require some explanation. <code>$SIMVERSE_REPOS</code> holds the folder containing the Simverse repos. Since we have cloned our plugins repo into that folder, we can find it there. <code>$SIMVERSE_WORKSPACE</code> holds the folder where Simverse stores all the files required for creating a cluster. <code>$SIMNET_NAME</code> holds the name of the cluster. When we create a cluster based on this recipe, we also have to give that cluster a name. That name is available through the <code>$SIMNET_NAME</code> variable. The rest of theDocker context folder follows a simple naming convention: <code>_volumes/[node type]-[node name]</code></p>\n<p>We do the same thing for Bob and Charlie.</p>\n<p>The last part of our recipe can be left out if you want. It generates an initialization script that can be run after creating the cluster. In this case it connects the nodes, but you can also use it to fund nodes and make transactions, build multiple scripts and what not. It just shows how versatile Simverse is.</p>\n<p>We can save our recipe. There are some simple naming conventions that you can follow that make easy to see what kind of back-end(s) and nodes this cluster uses:</p>\n<ul>\n<li><code>a</code>: bitcoind</li>\n<li><code>b</code>: btcd</li>\n<li><code>k</code>: lightningd</li>\n<li><code>l</code>: lnd</li>\n<li><code>m</code>: eclair</li>\n</ul>\n<p>So <code>a1k3</code> reads as &quot;one bitcoind node and two c-lightning nodes&quot;. You should use a postfix to identify any additional distinguishing features of the recipe. So in this case we save our recipe as <code>a1k3-plugin.sh</code> in the recipe folder of Simverse located at <code>~/simverse/recipes</code>.</p>\n<h2 id=\"building-your-cluster\">Building your cluster</h2>\n<p>With our recipe out of the way we can create our cluster.</p>\n<pre><code class=\"language-bash\">cd ~/simverse\n./sv create a1k3-plugin jitrebalance\n./sv enter jitrebalance\n./dc build\n./dc up</code></pre>\n<p>We have created a cluster named <code>jitrebalance</code>. This is the name of the cluster that we referenced in our recipe through the variable <code>$SIMNET_NAME</code>. Our cluster is based on the recipe <code>a1k3-plugin.sh</code> that we just created. With <code>enter</code> you enter your newly created simnet.</p>\n<p><code>./dc</code> is a handy shorthand for <code>docker-compose</code> with some important variables set. With <code>build</code> we build our Docker containers based on the <code>docker-compose.yml</code> that has been generated for us. And then we are ready to run the containers with <code>up</code>.</p>\n<p>You should see something like this:</p>\n<p><picture><source srcSet=\"/images/simverse-up_s.avif 540w,/images/simverse-up_m.avif 810w,/images/simverse-up_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/simverse-up_s.webp 540w,/images/simverse-up_m.webp 810w,/images/simverse-up_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/simverse-up_s.jpg 540w,/images/simverse-up_m.jpg 810w,/images/simverse-up_l.jpg 1080w\" src=\"/images/simverse-up_s.jpg\" alt=\"running Simverse\" title=\"Running a Simverse cluster\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"610\"/><figcaption>Running a Simverse cluster</figcaption></picture></p>\n<p>Now in a separate terminal session you can access your nodes and run the <code>init</code> script.</p>\n<pre><code class=\"language-bash\">cd ~/simverse\n./sv enter jitrebalance\n./init</code></pre>\n<p><picture><source srcSet=\"/images/simverse-init_s.avif 540w,/images/simverse-init_m.avif 810w,/images/simverse-init_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/simverse-init_s.webp 540w,/images/simverse-init_m.webp 810w,/images/simverse-init_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/simverse-init_s.jpg 540w,/images/simverse-init_m.jpg 810w,/images/simverse-init_l.jpg 1080w\" src=\"/images/simverse-init_s.jpg\" alt=\"running init\" title=\"Running the initialization script\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"410\"/><figcaption>Running the initialization script</figcaption></picture></p>\n<p>And with that you are done! You have now a Simverse cluster with three c-lightning nodes running the same plugin.</p>\n",
  { "mode": 100644 },
  "post/running-c-lightning-in-simverse-with-plugins",
  ["433"],
  "<p>The goal is to run c-lightning with plugins in a local testing cluster. For my cluster I use <a href=\"https://github.com/darwin/simverse\">Simverse</a>.\nSimverse allows for additional command line arguments to be passed to <code>lightningd</code>, so it should be possible to run <code>lightningd</code> with the <code>plugin</code> argument.</p>\n<p>Let&#39;s first clone our plugin. We will be using one of the plugins that are available through Lightningd on Github.</p>\n<pre><code>cd ~\\simverse\\_repos\ngit clone https://github.com/lightningd/plugins.git --depth 1</code></pre><p>We put the plugin in the <code>_repos</code> folder, because it is assumed that the plugin is there when the cluster is being build. (Also: throughout this article we assume your simverse folder is inside your home folder. If that is not the case, adjust it accordingly)</p>\n<p>Since all nodes in Simverse run inside Docker containers, that plugin-file should be made available inside the Docker context folder. The <code>_repos</code> folder is not part of that context (each container gets its own context) so we have to copy the file from the <code>_repos</code> folder to the Docker context folder. Luckily Simverse works with the concept of recipes. A recipe describes how your cluster should look like. A recipe is a bash script that uses a library called cookbook that can be used to build your cluster step-by-step. Since it is &quot;just&quot; a bash script, you can do anything bash can do to tweak your cluster.</p>\n<p>We will create a recipe that creates a cluster with three c-lightning nodes, running on a bitcoind back-end. </p>",
  "SSH keybased authentication Windows to Linux",
  "2020-11-20T00:00:00.000Z",
  ["446", "447"],
  "<p>I do most of my development on a remote machine. The machine isn&#39;t <em>that</em> remote, it&#39;s a mini-pc running Ubuntu that is standing right here on my desk. It has no peripherals, so I have to do all my development remotely through my Windows 10 laptop.</p>\n<p>Remote development with Vscode is amazing. It just works. Once you are set up, there&#39;s no difference with working locally. To have that seamless experience you do have to set up keybased authentication for SSH. If you don&#39;t you will be constantly reminded of working remotely, because you have to type in the password of the remote machine.</p>\n<!-- more -->\n<p>Configuring keybased authentication is <a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication\">documented</a>, but yesterday I had to go through it again, and it confused me...again. So this is my go at explaining it less confusing for the specific case of working on a <em>local Windows machine</em> and connecting to a <em>remote Linux machine</em>. So open up that PowerShell and let&#39;s start.</p>\n<p>Install the OpenSSH client if you haven&#39;t already. It is a optional feature of Windows 10. Search for &#39;Manage Optional Features&#39; in the Windows Start Menu and click on it. Scan the list to see if OpenSSH client is already installed. If not, then do so by clicking on &quot;Add a feature&quot;.</p>\n<p>If you haven&#39;t got a local SSH key pair, you should create one.</p>\n<pre><code class=\"language-PowerShell\">ssh-keygen -t rsa -b 4096</code></pre>\n<p>You can accept all defaults and keep the passphrase empty. It will result in a keypair generated in the <code>$HOME\\.ssh\\</code> folder which we will use later.</p>\n<p><picture><source srcSet=\"/images/ssh-keypair_s.avif 474w,/images/ssh-keypair_m.avif 711w,/images/ssh-keypair_l.avif 948w\" type=\"image/avif\"/><source srcSet=\"/images/ssh-keypair_s.webp 474w,/images/ssh-keypair_m.webp 711w,/images/ssh-keypair_l.webp 948w\" type=\"image/webp\"/><img srcSet=\"/images/ssh-keypair_s.jpg 474w,/images/ssh-keypair_m.jpg 711w,/images/ssh-keypair_l.jpg 948w\" src=\"/images/ssh-keypair_s.jpg\" alt=\"Create your local SSH key pair\" title=\"Create your local SSH key pair\" loading=\"lazy\" decoding=\"async\" width=\"948\" height=\"622\"/><figcaption>Create your local SSH key pair</figcaption></picture></p>\n<p>You are now ready to add your <em>local</em> key to the autorized keys on your <em>remote</em> machine. Run the following in PowerShell on your <em>local</em> machine.</p>\n<pre><code class=\"language-PowerShell\">$USER_AT_HOST=&quot;your-user-name-on-host@hostname&quot;\n$PUBKEYPATH=&quot;$HOME\\.ssh\\id_rsa.pub&quot;\n\n$pubKey=(Get-Content &quot;$PUBKEYPATH&quot; | Out-String); ssh &quot;$USER_AT_HOST&quot; &quot;mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; echo &#39;${pubKey}&#39; &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys&quot;</code></pre>\n<p>And that&#39;s it. You can now SSH into your remote machine without needing a password.</p>\n",
  { "mode": 100644 },
  "post/ssh-keybased-authentication-windows-to-linux",
  ["433"],
  "<p>I do most of my development on a remote machine. The machine isn&#39;t <em>that</em> remote, it&#39;s a mini-pc running Ubuntu that is standing right here on my desk. It has no peripherals, so I have to do all my development remotely through my Windows 10 laptop.</p>\n<p>Remote development with Vscode is amazing. It just works. Once you are set up, there&#39;s no difference with working locally. To have that seamless experience you do have to set up keybased authentication for SSH. If you don&#39;t you will be constantly reminded of working remotely, because you have to type in the password of the remote machine.</p>",
  "Debugging LND while running a local cluster",
  "2020-11-16T00:00:00.000Z",
  ["448", "449", "450"],
  "<p>If you want to debug LND, or if you want to take a real deep dive into LND, you probably want to be able to set breakpoints in the source code to see what is actually happening. Not only that, you also want to have the node run in a local cluster of other nodes, so that you can perform some real Lightning actions like opening a channel and make payments. This post takes you through the setup I use based on <a href=\"https://github.com/go-delve/delve\">Delve</a> and <a href=\"https://github.com/darwin/simverse\">Simverse</a>.</p>\n<!-- more -->\n<h2 id=\"setting-up-a-local-cluster-with-simverse\">Setting up a local cluster with Simverse</h2>\n<p>Simverse is an amazing tool for setting up local Lightning clusters. It uses docker-compose to manage the cluster and supports LND, c-lightning and Eclair nodes with either btcd or bitcoind back-ends. This makes it very easy to set up local clusters of any size, as long as your hardware can handle it. All nodes and back-ends are run in their own docker containers and are spun up on demand following a default recipe or a custom recipe that you can draft up yourself. It literally takes four commands to have a local cluster running with Simverse.</p>\n<p>For our setup we will use a hybrid cluster. There are 3 types of Simverse clusters: Homogenous clusters are Simverse clusters that run either lnd + btcd nodes, eclair + bitcoind nodes or c-lightning + bitcoind nodes. More generally speaking, a homgenous cluster only contains one flavor of back-end and one flavor of Lightning node. The second type of cluster is heterogenous cluster, containing a mix of nodes and back-ends. The third type of cluster is called a hybrid cluster. This is a Simverse cluster (either homogenous or heterogenous) that interacts with an external node that runs directly on the host machine instead of in a docker container. We will use the default Simverse cluster (a homogenous lnd + btcd cluster) and make it hybrid by connecting the LND node that runs the code that we are going to debug.</p>\n<p>Setting up the cluster with Simverse is not within the scope of this article, but the <a href=\"https://github.com/darwin/simverse\">Quickstart</a> of Simverse is all you need to do. That will result in having a cluster with 3 Docker containers, two running LND, and one running a btcd back-end.</p>\n<h2 id=\"building-lnd\">Building LND</h2>\n<p>We need to build de debug version of LND, to be able to do some debugging. I will be using the repo that Simverse automatically cloned. Simverse clones repos into the <code>_repos</code> folder inside the Simverse folder. In my case the Simverse folder is located here: <code>~/simverse/_repos</code>.</p>\n<pre><code>cd ~/simverse/_repos/lnd\nmake build</code></pre><p>The resulting binaries can be found in the repo folder itself: <code>lnd-debug</code> and <code>lncli-debug</code></p>\n<h2 id=\"create-a-lndconf-file\">Create a lnd.conf file</h2>\n<p>Yes, you can start lnd with a bunch of arguments. So there is no real need for a conf-file, but I think it makes it way easier to start LND with a conf-file. You can place your file anywhere, but I find it easy to have them all at a single place, and the most logical place is the default location: <code>~/.lnd/</code>.</p>\n<p>Give it a name that makes it easy to understand that this is a conf file not be used in a production environment, like <code>lnd-test.conf</code>.</p>\n<p>These are the contents of my <code>lnd-test.conf</code>:</p>\n<pre><code>noseedbackup=true\nbitcoin.active=true\nbitcoin.regtest=true\nno-macaroons=true\nbitcoin.node=btcd\nbtcd.rpchost=default_btcd1\nbtcd.rpccert=/home/mini/simverse/_workspace/default/_volumes/certs/rpc.cert\nbtcd.rpcuser=devuser\nbtcd.rpcpass=devpass\ndebuglevel=debug</code></pre><p>What this configuration does is running LND with (completely unsafe) development settings, using the btcd Docker container as the back-end.</p>\n<p>You would have to change <code>btcd.rpcert</code> to the path to the <code>rpc.cert</code> file in your Simverse workspace and you would probably have to change the <code>btcd.rpchost</code> as well. The <code>default_btcd1</code> host pointing to your btcd Docker container is <em>not</em> automatically added to your host file so either you have to add it to your host file or you have to replace it with an IP address. You can find the IP address of the btcd1 docker container of your Simverse cluster, by using the <code>list_docker_ips</code> command that ships with Simverse. (I told you that tool was amazing). An alternative solution is to run this <a href=\"https://github.com/dvddarias/docker-hoster\">extra docker container</a> that automatically updates entries in your hostfile.</p>\n<h2 id=\"installing-delve\">Installing Delve</h2>\n<p>Assuming you have Vscode installed, make sure you have installed the <a href=\"https://marketplace.visualstudio.com/items?itemName=golang.Go\">language support for Go</a> extension.</p>\n<p>Open the Command Palette, select <code>Go: Install/Update Tools</code>, and select <code>dlv</code></p>\n<p><picture><source srcSet=\"/images/install-dlv_s.avif 540w,/images/install-dlv_m.avif 810w,/images/install-dlv_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/install-dlv_s.webp 540w,/images/install-dlv_m.webp 810w,/images/install-dlv_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/install-dlv_s.jpg 540w,/images/install-dlv_m.jpg 810w,/images/install-dlv_l.jpg 1080w\" src=\"/images/install-dlv_s.jpg\" alt=\"install dlv\" title=\"Install dlv using the Command Palette\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"142\"/><figcaption>Install dlv using the Command Palette</figcaption></picture></p>\n<h2 id=\"configure-launchjson\">Configure launch.json</h2>\n<p>Open the folder of your LND repo with Vscode and create a launch.json file by selecting the gear icon on the Run view (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>D</kbd>) top bar.</p>\n<pre><code class=\"language-lang-json\">{\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;Launch lnd&quot;,\n            &quot;type&quot;: &quot;go&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;mode&quot;: &quot;exec&quot;,\n            &quot;program&quot;: &quot;${workspaceFolder}/lnd-debug&quot;,\n            &quot;env&quot;: {},\n            &quot;args&quot;: [&quot;--configfile=~/.lnd/lnd-test.conf&quot;],\n            &quot;showLog&quot;: true\n        }\n    ]\n}</code></pre>\n<p>The args parameter should contain the location of your conf-file.</p>\n<h2 id=\"set-breakpoints\">Set breakpoints</h2>\n<p>Now you are ready to set breakpoints, for instance in the <code>Main</code> function of the <code>lnd</code> package.</p>\n<p><picture><source srcSet=\"/images/set-breakpoint_s.avif 540w,/images/set-breakpoint_m.avif 810w,/images/set-breakpoint_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/set-breakpoint_s.webp 540w,/images/set-breakpoint_m.webp 810w,/images/set-breakpoint_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/set-breakpoint_s.jpg 540w,/images/set-breakpoint_m.jpg 810w,/images/set-breakpoint_l.jpg 1080w\" src=\"/images/set-breakpoint_s.jpg\" alt=\"Main function\" title=\"Main function\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"488\"/><figcaption>Main function</figcaption></picture></p>\n<p>If you start debugging, this breakpoint is immediately hit.</p>\n<p><picture><source srcSet=\"/images/hit-breakpoint_s.avif 540w,/images/hit-breakpoint_m.avif 810w,/images/hit-breakpoint_l.avif 1080w\" type=\"image/avif\"/><source srcSet=\"/images/hit-breakpoint_s.webp 540w,/images/hit-breakpoint_m.webp 810w,/images/hit-breakpoint_l.webp 1080w\" type=\"image/webp\"/><img srcSet=\"/images/hit-breakpoint_s.jpg 540w,/images/hit-breakpoint_m.jpg 810w,/images/hit-breakpoint_l.jpg 1080w\" src=\"/images/hit-breakpoint_s.jpg\" alt=\"Breakpoint hit\" title=\"Breakpoint hit\" loading=\"lazy\" decoding=\"async\" width=\"1080\" height=\"255\"/><figcaption>Breakpoint hit</figcaption></picture></p>\n<h2 id=\"done\">Done!</h2>\n<p>And there you have it, you can now start to debugging LND operating in a local cluster.</p>\n",
  { "mode": 100644 },
  "post/debugging-lnd-while-running-a-local-cluster",
  ["433"],
  "<p>If you want to debug LND, or if you want to take a real deep dive into LND, you probably want to be able to set breakpoints in the source code to see what is actually happening. Not only that, you also want to have the node run in a local cluster of other nodes, so that you can perform some real Lightning actions like opening a channel and make payments. This post takes you through the setup I use based on <a href=\"https://github.com/go-delve/delve\">Delve</a> and <a href=\"https://github.com/darwin/simverse\">Simverse</a>.</p>",
  "Building Bitcoin Core On Windows 10",
  "2017-11-03T00:00:00.000Z",
  ["451", "452"],
  "<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>\n<!-- more -->\n<p>If you haven&#39;t done so already, you need to activate this feature for  Windows. It&#39;s only available on 64-bit Windows 10.\nYou can follow the instructions for this on <a href=\"https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md\">https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md</a>\nThere&#39;s a catch, however. At the time of writing the Windows 10 bash feature comes with Ubuntu Xenial 16.04, which is exactly the Ubuntu version on which the build of Bitcoin Core is broken. So first check what version you are on.</p>\n<pre><code>lsb_release -a</code></pre><p>Your version appears on the &quot;Description&quot; line. If it is 16.04, which is the current latest LTS-version (Long Term Support) of Ubuntu, you&#39;ll have to upgrade to the next version. For this to work you&#39;ll need to change the file with the release-upgrade settings using vi.</p>\n<pre><code>sudo vi /etc/update-manager/release-upgrades\n# Find the line that reads:\nPrompt=LTS\n# Change it to:\nPrompt=normal</code></pre><p>Run</p>\n<pre><code>sudo do-release-upgrade</code></pre><p>After I was done, <code>lsb_release -a</code> yielded the brand new Ubuntu Zesty 17.04 in the description. On with the instructions on <a href=\"https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md\">https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md</a>.\nTake note that you have to install the dependencies for g++-mingw-w64-x86-64  and mingw-w64-x86-64-dev first, before changing the update-alternatives. The instructions are a bit confusing on this point.</p>\n<pre><code>sudo apt-get install git\ncd /usr/local/src\nsudo git clone https://github.com/bitcoin/bitcoin.git\nPATH=$(echo &quot;$PATH&quot; | sed -e &#39;s/:\\/mnt.*//g&#39;)\ncd bitcoin/depends\nsudo make HOST=x86_64-w64-mingw32\ncd ..\nsudo ./autogen.sh\nsudo CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/\nsudo make</code></pre><p>The first build took roughly 2 hours, so sit back and keep an eye on it from time to time.</p>\n<p>Apparently it is useful to copy the compiled executables to a directory on the windows drive in the same directory structure as they appear in the release .zip archive. This can be done in the following way (I already created a folder on the windows drive: c:\\workspace\\bitcoin although I&#39;m not sure if that&#39;s needed):</p>\n<pre><code>sudo make install DESTDIR=/mnt/c/workspace/bitcoin</code></pre><p>Again, sit back and wait for the process to finish.</p>\n<p>After the process has finished successfully, you will find the executables here: C:\\workspace\\bitcoin\\bin\nStarting bitcoin-qt.exe will start Bitcoin Core, the GUI node for Bitcoin.</p>\n",
  { "mode": 100644 },
  "post/building-bitcoin-core-on-windows-10",
  ["433"],
  "<p>I&#39;ve been following Bitcoin and more importantly the Blockchain from the sidelines for a few years now, but I wanted to get my hands dirty. Obviously I could just download the Bitcoin Core executables from bitcoin.org, but I always feel it gives me more insight if I build something myself. Also it&#39;s was a nice test case for Bash on Windows.</p>",
  "2022-02-17T09:18:12.827Z",
  "33492",
  ["453"],
  ["454"],
  { "mode": 100644 },
  "like/2022/02/17-33492",
  "2022-02-17T04:54:07.564Z",
  "17647",
  ["455"],
  ["456"],
  ["457", "458"],
  "<p>I am working on some animations to explain basic Lightning Network concepts. Needless to say, I&#39;m not quite there yet...\n<a href=\"https://brid.gy/publish/twitter\"></a><a href=\"https://brid.gy/publish/mastodon\"></a></p>\n",
  { "mode": 100644 },
  "note/2022/02/17-17647",
  "2022-02-16T02:06:12.272Z",
  "7572",
  ["455"],
  "<p>Testing accepting access token in HTTP Authorization header and POST body. This should not create a post</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-7572",
  "2022-02-16T01:47:39.641Z",
  "6459",
  ["455"],
  "<p>Micropub test of creating a basic h-entry</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-6459",
  "2022-02-16T01:24:22.774Z",
  "5062",
  ["455"],
  "<p>Testing accepting access token in post body</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-5062",
  "2022-02-16T01:24:00.335Z",
  "5040",
  ["455"],
  "<p>Testing accepting access token in HTTP Authorization header</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-5040",
  "2022-02-16T01:23:04.756Z",
  ["459"],
  "4984",
  ["455"],
  "<p>Micropub test of creating an h-entry with one category. This post should have one category, test1</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-4984",
  "2022-02-16T01:04:00.262Z",
  ["460", "461"],
  "3840",
  ["455"],
  "<p>Micropub test of creating an h-entry with categories. This post should have two categories, test1 and test2</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-3840",
  "2022-02-16T01:03:29.468Z",
  "3809",
  ["455"],
  "<p>Micropub test of creating an h-entry with a JSON request</p>\n",
  { "mode": 100644 },
  "note/2022/02/16-3809",
  "2022-02-16T01:02:28.633Z",
  "3748",
  ["455"],
  { "mode": 100644 },
  "note/2022/02/16-3748",
  "2022-02-15T13:17:03.672Z",
  "47823",
  ["462"],
  ["455"],
  "<p>Test</p>\n",
  { "mode": 100644 },
  "note/2022/02/15-47823",
  "2022-02-15T12:27:15.316Z",
  "44835",
  ["463"],
  ["455"],
  "<p>Note with picture</p>\n",
  { "mode": 100644 },
  "note/2022/02/15-44835",
  "2022-02-15T09:51:13.855Z",
  "35473",
  ["464"],
  ["455"],
  "<p>Test: Note wit a picture</p>\n",
  { "mode": 100644 },
  "note/2022/02/15-35473",
  "2022-02-15T09:30:37.201Z",
  ["465", "466"],
  "34237",
  ["455"],
  ["467"],
  "<p>TEST: Let&#39;s see if we can wait for this tweet to come online.</p>\n",
  { "mode": 100644 },
  "note/2022/02/15-34237",
  "2022-02-15T09:14:28.753Z",
  ["468", "469"],
  "33268",
  ["455"],
  ["467"],
  { "mode": 100644 },
  "note/2022/02/15-33268",
  "2022-02-15T09:01:39.212Z",
  "32499",
  ["470"],
  ["455"],
  { "mode": 100644 },
  "note/2022/02/15-32499",
  "2022-02-15T08:57:31.618Z",
  "32251",
  ["455"],
  ["471"],
  "<p>Test: Does syndication now work?\n<a href=\"https://brid.gy/publish/twitter\"></a></p>\n",
  { "mode": 100644 },
  "note/2022/02/15-32251",
  "2022-02-15T08:26:43.740Z",
  ["472", "473"],
  "30403",
  ["455"],
  ["467"],
  { "mode": 100644 },
  "note/2022/02/15-30403",
  "2022-02-15T08:17:27.426Z",
  ["474", "475"],
  "29847",
  ["455"],
  ["467"],
  { "mode": 100644 },
  "note/2022/02/15-29847",
  "2022-02-15T07:32:51.583Z",
  ["476", "477"],
  "27171",
  ["455"],
  ["467"],
  "<p>Let&#39;s see if syndication no works.</p>\n",
  { "mode": 100644 },
  "note/2022/02/15-27171",
  "2022-02-17T09:10:11.455Z",
  "33011",
  ["478"],
  ["479"],
  ["480", "481"],
  ["482", "483"],
  "<p>I am working on some animations to explain basic Lightning Network concepts. Needless to say, I&#39;m not quite there yet..</p>\n",
  { "mode": 100644 },
  "photo/2022/02/17-33011",
  "2022-02-17T08:35:33.863Z",
  ["480", "481"],
  "30933",
  ["478"],
  ["484"],
  "<p>I am working on some animations to explain basic Lightning Network concepts. Needless to say, I&#39;m not quite there yet...</p>\n",
  { "mode": 100644 },
  "photo/2022/02/17-30933",
  "2022-02-17T08:19:52.968Z",
  "29992",
  ["478"],
  ["485"],
  { "mode": 100644 },
  "photo/2022/02/17-29992",
  "2022-02-17T05:10:28.698Z",
  "18628",
  ["478"],
  ["486"],
  { "mode": 100644 },
  "photo/2022/02/17-18628",
  "2022-02-16T01:10:22.856Z",
  ["487"],
  "4222",
  ["478"],
  "<p>Micropub test of creating a photo referenced by URL</p>\n",
  { "mode": 100644 },
  "photo/2022/02/16-4222",
  "2022-02-16T01:05:50.140Z",
  ["487"],
  "3950",
  ["478"],
  { "mode": 100644 },
  "photo/2022/02/16-3950",
  ["105"],
  ["106"],
  { "mode": 100644 },
  ["105"],
  ["429"],
  { "mode": 100644 },
  "https://twitter.com/imanpyudha/status/1494582798749155328",
  "navigation",
  { "name": "488", "slug": "488" },
  { "name": "489", "slug": "489" },
  "posts",
  { "name": "490", "slug": "491" },
  { "name": "492", "slug": "492" },
  { "name": "493", "slug": "493" },
  { "name": "494", "slug": "494" },
  { "name": "495", "slug": "495" },
  { "name": "490", "slug": "491" },
  { "name": "496", "slug": "497" },
  { "name": "494", "slug": "494" },
  { "name": "498", "slug": "498" },
  { "name": "490", "slug": "491" },
  { "name": "499", "slug": "499" },
  { "name": "500", "slug": "500" },
  { "name": "501", "slug": "501" },
  { "name": "502", "slug": "502" },
  { "name": "503", "slug": "503" },
  { "name": "499", "slug": "499" },
  { "name": "502", "slug": "502" },
  { "name": "504", "slug": "504" },
  { "name": "505", "slug": "506" },
  "like",
  "https://bitcoinhackers.org/@emzy/107405217475100632",
  "note",
  "https://www.gijsvandam.nl/stream/2022/02/17-17647/htlc-animation.gif",
  "https://twitter.com/gijswijs/status/1494173611971784705",
  "https://bitcoinhackers.org/@gijswijs/107811551735313616",
  { "name": "507", "slug": "507" },
  { "name": "507", "slug": "507" },
  { "name": "508", "slug": "508" },
  "https://www.gijsvandam.nl/stream/2022/02/15-47823/prikkie.jpg",
  "https://www.gijsvandam.nl/stream/2022/02/15-44835/mary-and-max-5186538712.jpg",
  "https://www.gijsvandam.nl/_src/stream/media/2022/02/15-35473/mary-and-max-5186538712.jpg",
  { "name": "489", "slug": "489" },
  { "name": "509", "slug": "509" },
  "geo:2.97211,101.80853;u=30",
  { "name": "489", "slug": "489" },
  { "name": "509", "slug": "509" },
  "https://www.gijsvandam.nl/_src/stream/media/2022/02/15-32499/mary-and-max-5186538712.jpg",
  "https://twitter.com/gijswijs/status/1493510063658569734",
  { "name": "489", "slug": "489" },
  { "name": "509", "slug": "509" },
  { "name": "489", "slug": "489" },
  { "name": "509", "slug": "509" },
  { "name": "489", "slug": "489" },
  { "name": "509", "slug": "509" },
  "photo",
  { "value": "510", "alt": "511" },
  "https://brid.gy/publish/twitter",
  "https://brid.gy/publish/mastodon",
  "https://twitter.com/gijswijs/status/1494238092978438147",
  "https://bitcoinhackers.org/@gijswijs/107812559269502781",
  { "value": "510", "alt": "511" },
  { "value": "510", "alt": "512" },
  { "value": "510", "alt": "512" },
  "https://micropub.rocks/media/sunset.jpg",
  "webassembly",
  "janos",
  "boilerplate paper",
  "boilerplate-paper",
  "powershell",
  "git",
  "pandoc",
  "lua",
  "LaTeX",
  "latex",
  "revealjs",
  "simverse",
  "c-lightning",
  "ssh",
  "vscode",
  "lnd",
  "bitcoin",
  "windows 10",
  "windows-10",
  "test1",
  "test2",
  "indieweb",
  "https://www.gijsvandam.nl/stream/2022/2/17/htlc-animation.gif",
  "These beans are out of line!",
  "Those beans are out of line"
]
